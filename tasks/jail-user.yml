---


- name: Get  user's encrypted password
  set_fact:
    local_password: "{{ item.password | default ('!') }}"

- name: Compute user's password with plain_password + salt
  set_fact:
    local_password: "{{ item.plain_password | password_hash('sha512', item.password_salt | default ('C8reC.Xc')) }}"
  when:
    - item.plain_password is defined and item.plain_password != ''

- debug:
    msg: "computed password={{ local_password }}"

- name: Ensure jailed user exists.
  user:
    name: "{{ item.name }}"
    password: "{{ local_password | default('!') }}"
    groups: "{{ item.groups | default(ssh_chroot_jail_group_name) }}"
    append: true
    shell: "{{ item.shell | default(omit) }}"
    home: "{{ item.home | default(omit) }}"
    createhome: "{{ item.createhome | default(omit) }}"
  register: user_task

- name: Get encrypted_password
  set_fact:
    local_password: ''

- name: Add authorized SSH public keys to jailed user .ssh/authorized_keys
  debug:
    var: user_task

- debug:
    var: item

# add several SSH public keys to jailed user
- name: Add authorized SSH public keys to jailed user .ssh/authorized_keys
  authorized_key:
    user: "{{ item.name }}"
    key: "{{ lookup('file', pubkey_file) }}"
  loop: "{{ item.authorized_keys }}"
  loop_control:
    loop_var: pubkey_file
  when:
    - item.authorized_keys is defined
    - not user_task.failed
    - (item.state|default ('present')) == 'present'
  ignore_errors: ansible_check_mode

- name: Ensure jailed user has a homedir inside the jail (if configured).
  file:
    path: "{{ ssh_chroot_jail_path }}{{ item.home }}"
    state: directory
    owner: "{{ item.name }}"
    group: "{{ item.name }}"
    mode: 0755
  when: item.home is defined

- name: Ensure account skeleton files are copied into jailed user's home.
  command: "cp -r -n /etc/skel/. {{ ssh_chroot_jail_path }}{{ item.home }}"
  args:
    warn: false
  become: true
  become_user: "{{ item.name }}"
  failed_when: false
  when:
    - item.home is defined
    - user_task.changed

- name: Remount bind dirs in the jail
  mount:
    path: "{{ ssh_chroot_jail_path }}{{ bind.mount_point | default(bind.src_dir) }}"
    src: "{{ bind.src_dir }}"
    fstype: 'none'
    opts: "defaults,bind,{{ 'rw' if (bind.rw is defined and bind.rw) else 'ro' }}"
    state: "{{ bind.state |Â default ('mounted') }}"
  loop: "{{ item.bind_remounts }}"
  loop_control:
    loop_var: bind
  when:
    - item.bind_remounts is defined
